#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR=$(cd "$(dirname $0)/.." && pwd)

if [ -f $ENV_DIR/ASSET_SYNC_BUCKET ]; then
  ASSET_SYNC_BUCKET=$(cat $ENV_DIR/ASSET_SYNC_BUCKET)
fi

if [ -f $ENV_DIR/DELETE_COMPILED_ASSETS ]; then
  DELETE_COMPILED_ASSETS=$(cat $ENV_DIR/DELETE_COMPILED_ASSETS)
fi

if [ -f $ENV_DIR/DELETE_APP_ASSETS ]; then
  DELETE_APP_ASSETS=$(cat $ENV_DIR/DELETE_APP_ASSETS)
fi

if [ ! -z "$ASSET_SYNC_BUCKET" ]; then
  RCLONE_DIST=rclone-current-linux-amd64
  RCLONE_DIR=$CACHE_DIR/vendor/rclone

  if [[ ! -d $RCLONE_DIR ]]; then
    echo "-----> Downloading rclone"
    curl -O https://downloads.rclone.org/$RCLONE_DIST.zip

    mkdir -p $RCLONE_DIR
    unzip -j $RCLONE_DIST.zip -d $RCLONE_DIR
  fi

  export PATH="$RCLONE_DIR:$PATH"
  echo "Using rclone: $(rclone --version | head -n 1)"

  if [ -f $BUILD_DIR/heroku/asset-sync-setup.sh ]; then
    source $BUILD_DIR/heroku/asset-sync-setup.sh
  fi

  echo "-----> Syncing public directory with bucket [$ASSET_SYNC_BUCKET]..."

  # Sync the entire public directory with the remote. This command will delete
  # any assets from the remote not present in the local public directory (but
  # not vice-versa). Assuming the Heroku build cache is not cleared, this means
  # the remote will always have around 3 fingerprinted versions of each asset.
  rclone sync $BUILD_DIR/public asset_sync:$ASSET_SYNC_BUCKET -v --checksum

  if [[ ! "$DELETE_COMPILED_ASSETS" =~ ^(0|false)$ ]]; then
    echo "Removing compiled assets from public directory"
    find $BUILD_DIR/public/assets -type f ! \( -name ".sprockets-manifest*.json" -or -name "manifest-*.json" \) -delete
    find $BUILD_DIR/public/packs -type f ! -name "manifest.json*" -delete
    find $BUILD_DIR/public -type d -empty -delete
  fi

  if [[ ! "$DELETE_APP_ASSETS" =~ ^(0|false)$ ]]; then
    echo "Removing app/assets"
    rm -rf app/assets
  fi
fi
